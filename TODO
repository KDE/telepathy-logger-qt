* Fix exception handling in tpl-query-callback-template.h
* Implement class FilterQuery
* Implement SearchHit class
* Test if values returned by Entry building queries are TplEntry or TplEntryText
* Overload << operators to give a decent debug representation

* Use base class QGlib::Object for glib wrapper objects (LogManager)
* Convert to telepathy logger 0.2.4 API (now it is based on 0.1)

* Create Job class for query (very similar to Attica::Job for example), Tp::PendingOperation not working because of constructor with sharedptr
* Create LogManager class instead of having all classes query classes scattered
* Port to cmake (might be needed to do codegen for example)
* Use codegen from Qtgstreamer project to generate needed code for QGlib
* Port to Tp::PendingOperation subclasses or similar for async ops
* Use error reporting mechanism in Tp::PendingOperation
* Change guard headers to something like _QTpLogger_entity_h_HEADER_GUARD_
* Build library and export lib symbols 
* Rename QTpLogger namespace to QTpl ?

* Implement access to Clear log functionality, the gdbus bindings for Clear log operations will be released soon on telepathy-logger
* Implement Call Event to be released soon

* Add to all headers "This file is part of QTpLogger"
* Remove authors and just leave copyright on headers, keep authors in AUTHORS ?
